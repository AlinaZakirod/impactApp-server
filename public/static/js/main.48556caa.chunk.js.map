{"version":3,"sources":["history.js","components/user-pages/Signup.js","components/user-pages/Login.js","components/category-components/CategoryList.js","components/Home.js","components/Navbar.js","components/category-components/CategoryDetails.js","components/user-pages/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Signup","props","state","fullName","email","password","message","event","target","name","value","this","setState","preventDefault","axios","post","process","withCredentials","then","responseFromServer","console","log","userDoc","data","onUserChange","history","push","catch","err","currentUser","onSubmit","handleSubmit","onChange","genericSync","type","placeholder","React","Component","Login","response","CategoryList","categoriesFromBackEnd","map","oneCat","i","key","to","pathname","_id","theId","details","title","Home","addNewCategory","e","listOfCategories","newCategory","titleCategory","description","descriptionCategory","author","unshift","showAddCategoryForm","categoriesList","getAllCategories","updateInput","toggleForm","ready","onClick","Navbar","theUser","doLogout","handleChangeAct","actId","finalActs","arrayOfActions","filter","action","category","currentCategory","showCategoryDetails","actionsThatMatchedCategory","location","singleAction","showAddActForm","toggleFormCategory","showEditCategoryForm","handleChange","addNewActToDb","listOfActions","newAct","titleAct","descriptionAct","valueOfAct","actCategory","getAllActions","editCategoryInDb","updatedCategory","titleCat","descriptionCat","actionsFromBackEnd","allActs","min","handleChnge","oneCategory","getCategoryObjforDelete","Dashbord","getLessSuggestedActs","treatedSuggestedActs","singledSuggestedAct","getAllSuggestedActs","singleAct","currentAct","score","updateScore","handleViewDetails","detailsUnfolded","completedActs","suggestedActs","slice","userSuggestedActs","length","y","App","get","responseCategories","allCategories","responseActions","logout","delete","deleteCategory","newCategories","editCategory","singleCat","responseFromTheBackend","syncCurrentUSer","setTimeout","user","exact","path","render","handleCategoryUpdate","catObj","Dashboard","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.48556caa.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import React from \"react\";\nimport axios from \"axios\";\nimport history from \"../../history\";\n\nexport default class Signup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fullName: \"\",\n      email: \"\",\n      password: \"\",\n      message: null\n    };\n  }\n\n  genericSync(event) {\n    // console.log(\"what is: \", event.target.value)\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    // console.log(\"submitting form\");\n    event.preventDefault();\n\n    axios\n      .post(\n        // route we are hitting in the backend\n        `${process.env.REACT_APP_IMPACT_SERVER}/api/signup`,\n        // the data from the form (AKA req.body) that we are sending to this route to do the job\n        this.state,\n        // secure sending\n        { withCredentials: true }\n      )\n      .then(responseFromServer => {\n        console.log(\"response is:\", responseFromServer);\n        const { userDoc } = responseFromServer.data;\n        this.props.onUserChange(userDoc);\n        this.props.history.push(\"/\");\n        // history.push(\"/\");\n      })\n      .catch(err => console.log(\"Err in signup: \", err));\n  }\n\n  render() {\n    console.log(\"Do I have user in Signup: \", this.props.currentUser);\n    console.log(\" what is this >>>>>> \", this);\n    const { fullName, email, password } = this.state;\n    // console.log(\"STATE: \", this.state);\n    if (this.props.currentUser) {\n      return (\n        <div>\n          <h2>\n            {\" \"}\n            Welcome to your app, {this.props.currentUser.fullName} ! You're\n            signed in!{\" \"}\n          </h2>\n        </div>\n      );\n    }\n\n    return (\n      <section>\n        <h2> Sign up </h2>\n        <form\n          onSubmit={event => {\n            this.handleSubmit(event);\n          }}\n        >\n          <label> Full name: </label>\n          <input\n            value={fullName} // this.state.fullName\n            onChange={event => this.genericSync(event)}\n            type=\"text\"\n            name=\"fullName\"\n            placeholder=\"Full Name\"\n          />\n\n          <label> Email: </label>\n          <input\n            value={email} // this.state.email\n            onChange={event => this.genericSync(event)}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"my-email@email.com\"\n          />\n\n          <label> Password</label>\n          <input\n            value={password} // this.state.password\n            onChange={event => this.genericSync(event)}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"***********\"\n          />\n          <button> Sign Up </button>\n        </form>\n        {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n        {this.state.message && <div> {this.state.message} </div>}\n      </section>\n    );\n  }\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\nexport default class Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      message: null\n    };\n  }\n\n  genericSync(event) {\n    // console.log(\"what is: \", event.target.value)\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    // console.log(\"submitting form\");\n    event.preventDefault();\n\n    axios\n      .post(\n        // route we are hitting in the backend\n        `${process.env.REACT_APP_IMPACT_SERVER}/api/login`,\n        // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n        this.state,\n        // secure sending\n        { withCredentials: true }\n      )\n      .then(responseFromServer => {\n        // console.log(\"response is:\", responseFromServer);\n        const { userDoc } = responseFromServer.data;\n        this.props.onUserChange(userDoc);\n        // console.log(this.props.match);\n        this.props.history.push(\"/\");\n        // alert(\"You are logged in.\");\n      })\n      .catch(err => {\n        // console.log(\"err: \", err.response)\n        if (err.response.data)\n          return this.setState({ message: err.response.data.message });\n      });\n  }\n\n  render() {\n    const { fullName, email, password } = this.state;\n\n    return (\n      <section>\n        <h2> Login </h2>\n        <form onSubmit={event => this.handleSubmit(event)}>\n          <label> Email: </label>\n          <input\n            value={email} // this.state.email\n            onChange={event => this.genericSync(event)}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"my-email@ironhack.com\"\n          />\n\n          <label> Password</label>\n          <input\n            value={password} // this.state.password\n            onChange={event => this.genericSync(event)}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"***********\"\n          />\n          <button> Login </button>\n        </form>\n        {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n        {this.state.message && <div> {this.state.message} </div>}\n      </section>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction CategoryList(props) {\n  if (props.categoriesFromBackEnd !== null) {\n    // console.log(\">>>>\", props.categoriesFromBackEnd);\n    // console.log(\"this is the current state >>>>>>>>>> \", this.state);\n\n    return props.categoriesFromBackEnd.map((oneCat, i) => {\n      return (\n        <Link\n          key={i}\n          to={{\n            pathname: `/category/${oneCat._id}`,\n            state: {\n              theId: oneCat._id,\n              details: oneCat\n            }\n          }}\n        >\n          <p key={i}>{oneCat.title}</p>\n        </Link>\n      );\n    });\n  } else return \"Loading...\";\n}\n\nexport default CategoryList;\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport CategoryList from \"./category-components/CategoryList\";\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showAddCategoryForm: false,\n      titleCategory: \"\",\n      descriptionCategory: \"\",\n      categoriesFromBackEnd: this.props.categoriesFromBackEnd\n    };\n  }\n\n  addNewCategory = e => {\n    e.preventDefault();\n\n    let listOfCategories = [...this.props.categoriesFromBackEnd];\n\n    let newCategory = {\n      title: this.state.titleCategory,\n      description: this.state.descriptionCategory,\n      author: this.props.currentUser\n    };\n\n    listOfCategories.unshift(newCategory);\n\n    this.setState({\n      titleCategory: \"\",\n      descriptionCategory: \"\",\n      showAddCategoryForm: false,\n      categoriesList: listOfCategories\n    });\n\n    axios\n      .post(\n        `${process.env.REACT_APP_IMPACT_SERVER}/category/create`,\n        newCategory\n      )\n      .then(newCategory => {\n        this.props.getAllCategories();\n\n        {\n          /* add some success message */\n        }\n      })\n      .catch(err => console.log(\"Error while adding the new Category \", err));\n    console.log(\"Author:\", this.props.currentUser);\n\n    console.log(\"New Category is:\", newCategory);\n  };\n\n  updateInput = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  toggleForm = () => {\n    this.setState({ showAddCategoryForm: !this.state.showAddCategoryForm });\n  };\n\n  render() {\n    if (this.props.ready) {\n      // this.props.getAllCategories();\n      // console.log(\"___________\", this.props);\n      // console.log(this.props.currentUser.fullName);\n      // console.log(\"categoriesFromBackEnd: \", this.props.categoriesFromBackEnd);\n      return (\n        <div>\n          <h1>Impact</h1>\n          <h3>All categories:</h3>\n          <CategoryList\n            categoriesFromBackEnd={this.props.categoriesFromBackEnd}\n          />\n\n          {!this.state.showAddCategoryForm && this.props.currentUser && (\n            <button onClick={this.toggleForm}>Add New Category</button>\n          )}\n\n          {this.state.showAddCategoryForm && (\n            <form onSubmit={this.addNewCategory}>\n              <h3>Add New Category</h3>\n              <p>Title</p>\n              <input\n                name=\"titleCategory\"\n                type=\"text\"\n                value={this.state.titleCategory}\n                onChange={this.updateInput}\n              />\n              <p>Description</p>\n              <input\n                name=\"descriptionCategory\"\n                type=\"text\"\n                value={this.state.descriptionCategory}\n                onChange={this.updateInput}\n              />\n              <button>Submit</button>\n            </form>\n          )}\n        </div>\n      );\n    } else return \"Loading\";\n  }\n}\n","import React from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport CategoryList from \"./category-components/CategoryList\";\n\nclass Navbar extends React.Component {\n  render() {\n    return (\n      <div>\n        <NavLink to=\"/\">Home</NavLink>\n\n        {!this.props.theUser && (\n          <div>\n            <NavLink to=\"/login-page\">Login</NavLink>\n            <NavLink to=\"/signup-page\"> Signup </NavLink>\n          </div>\n        )}\n        {this.props.theUser && (\n          <div>\n            <NavLink to=\"/dashboard\">Dashboard</NavLink>\n            {/* <NavLink to=\"/profile\">Profile</NavLink> */}\n            <NavLink to=\"/community\"> Community </NavLink>\n            {/* <NavLink to=\"/act/add\"> Add Act </NavLink> */}\n            <button onClick={this.props.doLogout}>Logout</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport axios from \"axios\";\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showAddActForm: false,\n      titleAct: \"\",\n      descriptionAct: \"\",\n      valueOfAct: \"\",\n      actCategory: \"\",\n      currentCategory: this.props.location.state.details,\n      arrayOfActions: this.props.actionsFromBackEnd.allActs,\n      categoriesFromBackEnd: this.props.categoriesFromBackEnd,\n      showEditCategoryForm: false,\n      // titleCat: this.props.location.state.details.title,\n      // descriptionCat: this.props.location.state.details.description\n      titleCat: \"\",\n      descriptionCat: \"\"\n    };\n  }\n\n  handleChangeAct = actId => {\n    // const currentCategory = this.props.location.state.details;\n    // const arrayOfActions = this.props.actionsFromBackEnd;\n    // console.log(\"0~~~~~~~~~\", arrayOfActions);\n    const actionsThatMatchedCategory = this.state.arrayOfActions.filter(\n      action => action.category === this.state.currentCategory._id\n    );\n\n    // console.log(\"1~~~~~~~~~~~~~\", actionsThatMatchedCategory);\n    const finalActs = actionsThatMatchedCategory.filter(\n      action => action._id !== actId\n    );\n    // console.log(\"2~~~~~~~~~~~~~\", finalActs);\n\n    // __________________________\n\n    console.log(`${process.env.REACT_APP_IMPACT_SERVER}/act/${actId}/update`);\n    axios\n      .post(\n        `${process.env.REACT_APP_IMPACT_SERVER}/act/${actId}/update`,\n        {},\n        {\n          withCredentials: true\n        }\n      )\n\n      .then(() => {\n        // make some success message here!\n        this.setState({\n          arrayOfActions: finalActs\n        });\n      })\n\n      .catch(err => console.log(\"Error while click on `Act Now`\", err));\n  };\n\n  showCategoryDetails = () => {\n    if (this.props.categoriesFromBackEnd !== null) {\n      // const currentCategory = this.props.location.state.details;\n      // const this.state.arrayOfActions = this.props.actionsFromBackEnd;\n      const actionsThatMatchedCategory = this.state.arrayOfActions.filter(\n        action => action.category == this.state.currentCategory._id\n      );\n      console.log(\"Current category: \", this.props.location.state.details);\n\n      // console.log(\"^^^^^^^^\", currentCategory);\n      // console.log(\"********\", arrayOfActions);\n      return (\n        <div>\n          <h2>{this.state.currentCategory.title}</h2>\n          <p>{this.state.currentCategory.description}</p>\n          <b>Actions:</b>\n          {actionsThatMatchedCategory.map((singleAction, i) => {\n            console.log(singleAction);\n            return (\n              <div key={i}>\n                <p>{singleAction.title}</p>\n                <button\n                  onClick={e => {\n                    this.handleChangeAct(singleAction._id);\n                  }}\n                >\n                  Act now!\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      );\n    } else return \"loading\";\n  };\n\n  toggleForm = () => {\n    this.setState({ showAddActForm: !this.state.showAddActForm });\n  };\n\n  toggleFormCategory = () => {\n    this.setState({ showEditCategoryForm: !this.state.showEditCategoryForm });\n  };\n\n  handleChange = e => {\n    console.log(\"changing value\", e.target.name, e.target.value);\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  addNewActToDb = e => {\n    e.preventDefault();\n    console.log(\"#####\", this.state);\n    let listOfActions = [...this.state.arrayOfActions];\n    console.log(\"first\", listOfActions);\n\n    let newAct = {\n      title: this.state.titleAct,\n      description: this.state.descriptionAct,\n      value: this.state.valueOfAct,\n      category: this.state.actCategory,\n      author: this.props.currentUser\n    };\n\n    listOfActions.unshift(newAct);\n\n    this.setState({\n      showAddActForm: false,\n      titleAct: \"\",\n      descriptionAct: \"\",\n      valueOfAct: \"\",\n      actCategory: \"\",\n      arrayOfActions: listOfActions\n    });\n\n    console.log(\"second\", listOfActions);\n    axios\n      .post(`${process.env.REACT_APP_IMPACT_SERVER}/act/create`, newAct)\n      .then(newAct => {\n        this.props.getAllActions();\n      })\n      .catch(err => console.log(\"Error while adding the new Act \", err));\n\n    // this.props.getAllActions();\n  };\n\n  //end of functions for 'Add Actions'\n\n  editCategoryInDb = e => {\n    e.preventDefault();\n    let listOfCategories = [...this.state.categoriesFromBackEnd];\n    console.log(\"Cat first\", listOfCategories);\n\n    let updatedCategory = {\n      title: this.state.titleCat,\n      description: this.state.description\n    };\n\n    listOfCategories.unshift(updatedCategory);\n\n    this.setState({\n      showEditCategoryForm: false,\n      titleCat: \"\",\n      descriptionCat: \"\"\n    });\n\n    console.log(\"Cat second\", listOfCategories);\n    axios\n      .post(\n        `${process.env.REACT_APP_IMPACT_SERVER}/category/${this.state.currentCategory._id}/update`,\n        updatedCategory\n      )\n      .then(newAct => {\n        this.props.getAllCategories();\n      })\n      .catch(err => console.log(\"Error while editing theCategory \", err));\n\n    this.props.getAllCategories();\n    // this.props.getAllActions();\n  };\n\n  render() {\n    if (this.props.categoriesFromBackEnd !== null) {\n      console.log(\"Current category\", this.state.currentCategory.author);\n      console.log(\"current User:\", this.props.currentUser._id);\n\n      return (\n        <div>\n          {/* <p>Category: {this.props.location.state.details.title}</p> */}\n          {this.showCategoryDetails()}\n          <div>\n            {/* start of Add Action */}\n            <div>\n              {!this.state.showAddActForm && (\n                <button onClick={this.toggleForm}>Add New Action</button>\n              )}\n\n              {this.state.showAddActForm && (\n                <form onSubmit={this.addNewActToDb}>\n                  <h3>Add New Action</h3>\n                  <p>Title</p>\n                  <input\n                    name=\"titleAct\"\n                    type=\"text\"\n                    value={this.state.titleAct}\n                    onChange={this.handleChange}\n                  />\n                  <p>Description</p>\n                  <input\n                    name=\"descriptionAct\"\n                    type=\"text\"\n                    value={this.state.descriptionAct}\n                    onChange={this.handleChange}\n                  />\n\n                  <p>Value: </p>\n                  <input\n                    name=\"valueOfAct\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={this.state.valueOfAct}\n                    onChange={this.handleChnge}\n                  />\n\n                  <p>Select Category</p>\n                  <select name=\"actCategory\" onChange={this.handleChange}>\n                    <option value=\"\">Pick category</option>\n                    {this.props.categoriesFromBackEnd.map(oneCategory => {\n                      return (\n                        <option\n                          // value={oneCategory._id}\n                          value={oneCategory._id}\n                          key={oneCategory._id}\n                        >\n                          {oneCategory.title}\n                        </option>\n                      );\n                    })}\n                  </select>\n\n                  <button>Submit</button>\n                </form>\n              )}\n            </div>\n            {/* end of Add action */}\n            <p>_________________________</p>\n\n            {/* <button\n              onClick={() => {\n                this.props.getCategoryObj(this.props.location.state.details);\n              }}\n            >\n              Delete Category\n            </button> */}\n\n            <div>\n              {this.state.currentCategory.author ===\n                this.props.currentUser._id && (\n                <div>\n                  <div>\n                    {!this.state.showEditCategoryForm && (\n                      // <button\n                      //   onClick={() => {\n                      //     this.toggleFormCategory;\n                      //     this.props.handleCategoryUpdate(\n                      //       this.props.location.state.details\n                      //     );\n                      //   }}\n                      // >\n                      <button onClick={this.toggleFormCategory}>\n                        Edit Category\n                      </button>\n                    )}\n                    )}\n                    {this.state.showEditCategoryForm && (\n                      <form onSubmit={this.editCategoryInDb}>\n                        <h3>Edit {this.state.currentCategory.title}</h3>\n                        <p>Title</p>\n                        <input\n                          name=\"titleAct\"\n                          type=\"text\"\n                          placeholder={this.state.currentCategory.title}\n                          value={this.state.titleAct}\n                          onChange={this.handleChange}\n                        />\n                        <p>Description</p>\n                        <textarea\n                          name=\"descriptionAct\"\n                          type=\"text\"\n                          placeholder={this.state.currentCategory.description}\n                          value={this.state.descriptionAct}\n                          onChange={this.handleChange}\n                        />\n                        <button>Save Changes</button>\n                      </form>\n                    )}\n                  </div>\n\n                  <div>\n                    <button\n                      onClick={() => {\n                        this.props.getCategoryObjforDelete(\n                          this.props.location.state.details\n                        );\n                      }}\n                    >\n                      Delete Category{\" \"}\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return \"Loading...\";\n    }\n  }\n}\n\n//WITHOUT PARAMETERS\n{\n  /* <button onClick={this.function}></button> */\n}\n\n//WITH PARAMETERS\n{\n  /* <button onClick={e => this.function(parameterGoesHere)}></button> */\n}\n\n// export { handleChangeAct };\n","import React from \"react\";\nimport axios from \"axios\";\n// import { Link } from \"react-router-dom\";\n// import { handleChangeAct } from \"../category-components/CategoryDetails\";\n\nclass Dashbord extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treatedSuggestedActs: null,\n      detailsUnfolded: false,\n      // completedActs: this.props.completedActs,\n      suggestedActs: this.props.currentUser.suggestedActs.slice(0, 4),\n      score: this.props.currentUser.score\n    };\n  }\n\n  componentDidMount() {\n    const userSuggestedActs = [];\n    // console.log(\"1.-=-=-=-=-=\", this.state.suggestedActs[1]);\n    // console.log(\"2.-=-=-=-=-=\", this.props.actionsFromBackEnd.allActs[1]._id);\n    for (let i = 0; i < this.props.currentUser.suggestedActs.length; i++) {\n      for (let y = 0; y < this.props.actionsFromBackEnd.allActs.length; y++) {\n        if (\n          this.props.actionsFromBackEnd.allActs[y]._id ===\n          this.props.currentUser.suggestedActs[i]\n        ) {\n          userSuggestedActs.unshift(this.props.actionsFromBackEnd.allActs[y]);\n          // console.log(\"3.-=-=-=-=-=\", userSuggestedActs);\n        }\n      }\n    }\n    console.log(\"****\", userSuggestedActs);\n\n    this.setState(\n      {\n        treatedSuggestedActs: userSuggestedActs\n      },\n      () => console.log(\"####\", this.state.treatedSuggestedActs)\n    );\n  }\n\n  getLessSuggestedActs = () => {\n    // this.actTreatment();\n    console.log(\"All\", this.state.treatedSuggestedActs);\n    if (this.state.treatedSuggestedActs !== null) {\n      // const fourActs = this.state.treatedSuggestedActs.slice(0, 4);\n      // console.log(\"4:\", fourActs);\n      console.log(\"cut suggested acts:\", this.state.treatedSuggestedActs);\n      return (\n        <div>\n          <p>Suggested Acts:</p>\n          {this.state.treatedSuggestedActs\n            .filter((singledSuggestedAct, i) => i < 4)\n            .map((singledSuggestedAct, i) => {\n              return (\n                <div>\n                  <h4>\n                    <b>{singledSuggestedAct.title}</b>{\" \"}\n                  </h4>\n                  <p>{singledSuggestedAct.value}</p>\n                  <p>{singledSuggestedAct.category}</p>\n                  <button\n                    onClick={e => {\n                      this.handleChangeAct(singledSuggestedAct._id);\n                    }}\n                  >\n                    Act Now!\n                  </button>\n                </div>\n              );\n            })}\n          <button onClick={this.getAllSuggestedActs}>\n            View All suggested Acts\n          </button>\n        </div>\n      );\n    }\n  };\n\n  handleChangeAct = actId => {\n    if (this.state.treatedSuggestedActs !== null) {\n      const finalActs = this.state.treatedSuggestedActs.filter(\n        singleAct => singleAct._id !== actId\n      );\n\n      // how to get the value of the act? than update the score\n      const currentAct = this.state.treatedSuggestedActs.filter(\n        singleAct => singleAct._id === actId\n      );\n\n      console.log(\"SCORE\", this.state.score);\n      const updateScore = currentAct[0].value + this.state.score;\n      console.log(\"To add\", updateScore);\n      axios\n        .post(\n          `${process.env.REACT_APP_IMPACT_SERVER}/act/${actId}/update`,\n          {},\n          {\n            withCredentials: true\n          }\n        )\n\n        .then(() => {\n          this.setState({\n            treatedSuggestedActs: finalActs,\n            score: updateScore\n          });\n        })\n        .catch(err => console.log(\"Error while click on `Act Now`\", err));\n    }\n  };\n\n  getAllSuggestedActs = () => {\n    console.log(\"MOREEEEEEE\");\n    return (\n      <h2>MORE</h2>\n      // <div>\n      //   {this.state.treatedSuggestedActs\n      //     .filter((singledSuggestedAct, i) => i > 4)\n      //     .map((singledSuggestedAct, i) => {\n      //       return (\n      //         <div>\n      //           <h4>\n      //             <b>{singledSuggestedAct.title}</b> {singledSuggestedAct.value}\n      //           </h4>\n      //           <p>{singledSuggestedAct.category}</p>\n      //           <button>Act Now!</button>\n      //         </div>\n      //       );\n      //     })}\n      //   <button onClick={this.getAllSuggestedActs}>Hide</button>\n      // </div>\n    );\n  };\n\n  handleViewDetails = () => {\n    this.setState({\n      detailsUnfolded: true\n    });\n    return (\n      <div>\n        <p>Completed acts:</p>\n        {this.props.currentUser.completedActs.map((singleAction, i) => {\n          return (\n            <div key={i}>\n              <p>\n                {singleAction}\n                {singleAction.title} {singleAction.value}\n              </p>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  toggleForm = () => {\n    this.setState({ detailsUnfolded: !this.state.detailsUnfolded });\n  };\n\n  // const actionsThatMatchedCategory = this.state.arrayOfActions.filter(\n  //   action => action.category === this.state.currentCategory._id\n  // );\n\n  render() {\n    if (this.props.currentUser !== null) {\n      console.log(\">>>>>>>>>>>>>>>>>>\", this.state.treatedSuggestedActs);\n\n      return (\n        <div>\n          <h2>Hi there, {this.props.currentUser.fullName}</h2>\n          <h4>Your score is {this.state.score}</h4>\n          {!this.state.detailsUnfolded && (\n            <button onClick={this.toggleForm}>View Details</button>\n          )}\n\n          {this.state.detailsUnfolded && (\n            <div>\n              <p>Completed acts:</p>\n              {this.state.treatedSuggestedActs.map((singleAction, i) => {\n                return (\n                  <div>\n                    <div key={i}>\n                      <b>{singleAction.title}</b> {singleAction.value}\n                    </div>\n                  </div>\n                );\n              })}\n              <button onClick={this.toggleForm}>Show Less</button>\n            </div>\n          )}\n\n          <p>________________________________</p>\n          {this.getLessSuggestedActs()}\n        </div>\n      );\n    } else {\n      return \"Loading...\";\n    }\n  }\n}\n\nexport default Dashbord;\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport history from \"./history\";\nimport axios from \"axios\";\n\nimport { Switch, Route, NavLink } from \"react-router-dom\";\n\nimport Signup from \"./components/user-pages/Signup\";\nimport Login from \"./components/user-pages/Login\";\nimport Home from \"./components/Home\";\nimport Navbar from \"./components/Navbar\";\nimport CategoryList from \"./components/category-components/CategoryList\";\nimport CategoryDetails from \"./components/category-components/CategoryDetails\";\nimport Dashboard from \"./components/user-pages/Dashboard\";\nimport { throwStatement } from \"@babel/types\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      categoriesFromBackEnd: null,\n      actionsFromBackEnd: null,\n      ready: false\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(`${process.env.REACT_APP_IMPACT_SERVER}/api/checkuser`, {\n        withCredentials: true\n      })\n      .then(responseFromTheBackend => {\n        // console.log(\"User in APP.JS: \", responseFromTheBackend)\n        const { userDoc } = responseFromTheBackend.data;\n        this.syncCurrentUSer(userDoc);\n      })\n      .catch(err =>\n        console.log(\n          \"Err while getting the user from the checkuser route: \",\n          err\n        )\n      );\n\n    this.getAllCategories();\n    this.getAllActions();\n\n    setTimeout(() => {\n      this.setState({\n        ready: true\n      });\n    }, 1000);\n  }\n\n  getAllCategories = () => {\n    // console.log(\n    //   \"}{{}{}{}{}{}{}{}{}{}{}{}{}{}{\",\n    //   process.env.REACT_APP_IMPACT_SERVER\n    // );\n    axios\n      // .get(`${process.env.REACT_APP_IMPACT_SERVER}/category/allCats`)\n      .get(`${process.env.REACT_APP_IMPACT_SERVER}/category/allCats`)\n      .then(responseCategories => {\n        console.log(\"Categories from DB: \", responseCategories.data);\n        this.setState({\n          categoriesFromBackEnd: responseCategories.data.allCategories\n        });\n      })\n      .catch(err => console.log(\"Err while getting categories: \", err));\n  };\n\n  getAllActions = () => {\n    axios\n      .get(`${process.env.REACT_APP_IMPACT_SERVER}/acts`)\n      .then(responseActions => {\n        console.log(\"Actions are: \", responseActions.data);\n        this.setState({\n          actionsFromBackEnd: responseActions.data\n        });\n      })\n      .catch(err => console.log(\"Err while getting actions: \", err));\n  };\n\n  syncCurrentUSer(user) {\n    this.setState({ currentUser: user });\n  }\n\n  logout = () => {\n    this.setState({ currentUser: null });\n    axios\n      .delete(`${process.env.REACT_APP_IMPACT_SERVER}/api/logout`, {\n        withCredentials: true\n      })\n      .then(() => {\n        this.props.history.push(\"/\");\n      })\n      .catch(err => console.log(\"error while logging out \", err));\n  };\n\n  deleteCategory = oneCat => {\n    // console.log(\"do i have cat here: \", oneCat.author);\n    // console.log(\"Current user: \", this.state.currentUser._id);\n    // && this.state.currentUser._id === oneCat.author\n    if (oneCat !== null) {\n      const theId = oneCat._id;\n      console.log(\"The id: \", theId);\n\n      axios\n        .post(`${process.env.REACT_APP_IMPACT_SERVER}/category/${theId}/delete`)\n        .then(response => {\n          const newCategories = this.state.categoriesFromBackEnd.filter(\n            category => category._id !== oneCat._id\n          );\n          this.setState({\n            categoriesFromBackEnd: newCategories\n          });\n          console.log(\"helllooooo: =-=-=-=-=-=-=-=-=-= \", history);\n          history.push(\"/\");\n        })\n        .catch(err => console.log(\"Error while deleteing the category \", err));\n    } else return \"loading\";\n  };\n\n  editCategory = singleCat => {\n    console.log(\"do i have cat here: \", singleCat);\n    if (singleCat !== null) {\n      const theId = singleCat._id;\n      console.log(\"The id: \", theId);\n\n      axios\n        .post(`${process.env.REACT_APP_IMPACT_SERVER}/category/${theId}/update`)\n        .then(response => {\n          // const newCategories = this.state.categoriesFromBackEnd.filter(\n          //   category => category._id !== oneCat._id\n          // );\n          // this.setState({\n          //   categoriesFromBackEnd: newCategories\n          // });\n          // console.log(\"helllooooo: =-=-=-=-=-=-=-=-=-= \", history);\n          // history.push(\"/\");\n        })\n        .catch(err => console.log(\"Error while updating the category \", err));\n    } else return \"loading\";\n  };\n\n  render() {\n    // console.log(\"the state in APPJS: \", this.state);\n    console.log(\"++++++++++++++\", this.state.categoriesFromBackEnd);\n    // console.log(\"########\", this.state.currentUser);\n    return (\n      <div>\n        <header>\n          <Navbar theUser={this.state.currentUser} doLogout={this.logout} />\n        </header>\n        <Switch>\n          {/* this is example how we would render component normally */}\n          {/* <Route exact path=\"/somePage\" component={ someComponentThatWillRenderWhenThisRouteIsHit }   /> */}\n          {/* <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/act/add\" component={addAct} /> */}\n\n          {/* if we have to pass some props down to a component,\n          we can't use a standard way of rendering using component={},\n          but instead we have to use render = {}  like in the example below */}\n          <Route\n            exact\n            path=\"/signup-page\"\n            render={props => (\n              <Signup\n                {...props}\n                currentUser={this.state.currentUser}\n                onUserChange={userDoc => this.syncCurrentUSer(userDoc)}\n                ready={this.state.ready}\n              />\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/login-page\"\n            render={props => (\n              <Login\n                {...props}\n                currentUser={this.state.currentUser}\n                onUserChange={userDoc => this.syncCurrentUSer(userDoc)}\n                ready={this.state.ready}\n              />\n            )}\n          />\n\n          {/* <Route path=\"/category\" component={ActionList} /> */}\n\n          {/* it was the way Marcos showed me */}\n          {/* <Route\n            exact\n            path=\"/category\"\n            render={props => <CategoryList {...props} />}\n          />\n\n          <Route\n            path=\"/category/:id\"\n            render={props => <CategoryDetails {...props} />}\n          /> */}\n\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <Home\n                {...props}\n                getAllCategories={this.getAllCategories}\n                // currentUser={this.state.currentUser}\n                categoriesFromBackEnd={this.state.categoriesFromBackEnd}\n                actionsFromBackEnd={this.state.actionsFromBackEnd}\n                ready={this.state.ready}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <CategoryList\n                {...props}\n                currentUser={this.state.currentUser}\n                categoriesFromBackEnd={this.state.categoriesFromBackEnd}\n                actionsFromBackEnd={this.state.actionsFromBackEnd}\n                ready={this.state.ready}\n              />\n            )}\n          />\n\n          <Route\n            path=\"/category/\"\n            render={props => (\n              <CategoryDetails\n                {...props}\n                handleCategoryUpdate={singleCat => this.editCategory(singleCat)}\n                getCategoryObjforDelete={catObj => this.deleteCategory(catObj)}\n                getAllActions={this.getAllActions}\n                getAllCategories={this.getAllCategories}\n                currentUser={this.state.currentUser}\n                categoriesFromBackEnd={this.state.categoriesFromBackEnd}\n                actionsFromBackEnd={this.state.actionsFromBackEnd}\n                ready={this.state.ready}\n              />\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/dashboard\"\n            render={props => (\n              <Dashboard\n                {...props}\n                getAllActions={this.getAllActions}\n                currentUser={this.state.currentUser}\n                categoriesFromBackEnd={this.state.categoriesFromBackEnd}\n                actionsFromBackEnd={this.state.actionsFromBackEnd}\n                currentUser={this.state.currentUser}\n                ready={this.state.ready}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport history from \"./history\";\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}